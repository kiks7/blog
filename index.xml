<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>ðŸ‘¾ KIKS. on</title><link>https://1day.dev/</link><description>Recent content in ðŸ‘¾ KIKS. on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://1day.dev/index.xml" rel="self" type="application/rss+xml"/><item><title>CVE-2022-2602: DirtyCred File Exploitation applied on an io_uring UAF</title><link>https://1day.dev/notes/CVE-2022-2602-DirtyCred-File-Exploitation-applied-on-an-io_uring-UAF/</link><pubDate>Tue, 20 Dec 2022 00:00:00 +0100</pubDate><guid>https://1day.dev/notes/CVE-2022-2602-DirtyCred-File-Exploitation-applied-on-an-io_uring-UAF/</guid><description>Introduction In the past few weeks, I worked with @LukeGix (checkout his blog post on the same vulnerability here) to exploit the CVE-2022-2602, a very interesting bug from multiple perspectives without a public exploit, that impacts the io_uring subsystem with an Use-After-Free vulnerability handling registered file descriptors.</description></item><item><title>Linux Kernel n-day exploit development</title><link>https://1day.dev/notes/Linux-Kernel-n-day-exploit-development-CVE-2020-27786/</link><pubDate>Mon, 13 Jun 2022 00:00:00 +0100</pubDate><guid>https://1day.dev/notes/Linux-Kernel-n-day-exploit-development-CVE-2020-27786/</guid><description>Introduction In the previous article ([[Hunting for Linux kernel public vulnerabilities]]) I described how I identified a good candidate vulnerability using public resources to practise some exploitation techiques.</description></item><item><title>Hunting for Linux kernel public vulnerabilities</title><link>https://1day.dev/notes/Hunting-for-Linux-kernel-public-vulnerabilities/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0100</pubDate><guid>https://1day.dev/notes/Hunting-for-Linux-kernel-public-vulnerabilities/</guid><description>Introduction Recently was looking for a vulnerability that permitted me to practise what I&amp;rsquo;ve learned during the last few months on Linux Kernel Exploitation with a &amp;ldquo;real-life&amp;rdquo; scenario.</description></item><item><title>KRWX: Kernel Read Write Execute</title><link>https://1day.dev/notes/KRWX-Kernel-Read-Write-Execute/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0100</pubDate><guid>https://1day.dev/notes/KRWX-Kernel-Read-Write-Execute/</guid><description>Introduction github project: https://github.com/kiks7/KRWX
During the last few months/year I was studying and approaching the Kernel Exploitation subject and during this journey I developed few tools that assissted me (and currently assist) on better understanding specific topics.</description></item><item><title>Owncloud Multiple Vulnerabilities (CSRF, SSRF and Information Leak)</title><link>https://1day.dev/notes/Owncloud-Multiple-Vulnerabilities-CSRF-SSRF-and-Information-Leak/</link><pubDate>Sun, 26 Jul 2020 00:00:00 +0100</pubDate><guid>https://1day.dev/notes/Owncloud-Multiple-Vulnerabilities-CSRF-SSRF-and-Information-Leak/</guid><description>Introduction During the research time in Hacktive Security I discovered several flaws in the owncloud product. Owncloud is an open-source cloud service similar to Google Drive.</description></item><item><title>Android Internals IPC: Binder and Service Manager Perspective</title><link>https://1day.dev/notes/Android-Internals-IPC-Binder-and-Service-Manager-Perspective/</link><pubDate>Sun, 26 Apr 2020 00:00:00 +0100</pubDate><guid>https://1day.dev/notes/Android-Internals-IPC-Binder-and-Service-Manager-Perspective/</guid><description>Introduction As mentioned in the previous article, Android uses the Binder for IPC communications. Good to know, the Binder was not created by Google.</description></item><item><title>Android Internals IPC: Introduction</title><link>https://1day.dev/notes/Android-Internals-IPC-Introduction/</link><pubDate>Mon, 20 Apr 2020 00:00:00 +0100</pubDate><guid>https://1day.dev/notes/Android-Internals-IPC-Introduction/</guid><description>Introduction In the last few months I was studying Android Internals in order to perform some security research in the future.</description></item><item><title>Moodle Server-Side Request Forgery</title><link>https://1day.dev/notes/Moodle-Server-Side-Request-Forgery-SSRF/</link><pubDate>Tue, 14 Apr 2020 00:00:00 +0100</pubDate><guid>https://1day.dev/notes/Moodle-Server-Side-Request-Forgery-SSRF/</guid><description>During the research time in Hacktive Security I found 2 Server-Side Request Forgery on Moodle. The first one is a Blind SSRF already discovered in 2018 and tracked as CVE-2018-1042 without a proper patch, the other one is a fresh SSRF while parsing image tags inside the same component (File Picker).</description></item><item><title>TIM Mobile Phone Geolocalization</title><link>https://1day.dev/notes/TIM-Mobile-Phone-Geolocalization/</link><pubDate>Mon, 09 Dec 2019 15:00:00 +0100</pubDate><guid>https://1day.dev/notes/TIM-Mobile-Phone-Geolocalization/</guid><description>During the monthly research activity in Hacktive Security, we found and went in depth with an interesting security issue allowing geolocation of mobile devices using TIM, an Italian communication provider.</description></item><item><title>Rusty Joomla Remote Code Execution</title><link>https://1day.dev/notes/Rusty-Joomla-Remote-Code-Execution/</link><pubDate>Thu, 03 Oct 2019 15:00:00 +0100</pubDate><guid>https://1day.dev/notes/Rusty-Joomla-Remote-Code-Execution/</guid><description>Introduction During one of research activities in Hacktive Security, we discovered an undisclosed PHP Object Injection on Joomla CMS from the release 3.</description></item><item><title>How to Write FUD Malware [Thesis]</title><link>https://1day.dev/notes/How-To-Write-FUD-Malware-Thesis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1day.dev/notes/How-To-Write-FUD-Malware-Thesis/</guid><description>I wrote this thesis in the last high school year (2017), it was my introduction to the low-level world that quickly turned into the exploitation part of it.</description></item></channel></rss>