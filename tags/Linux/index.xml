<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on</title><link>https://1day.dev/tags/Linux/</link><description>Recent content in Linux on</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 04 Nov 2024 00:00:00 +0100</lastBuildDate><atom:link href="https://1day.dev/tags/Linux/index.xml" rel="self" type="application/rss+xml"/><item><title>A Reverse Engineering Journey Walkthrough</title><link>https://1day.dev/notes/A-Reverse-Engineering-Journey-Walkthrough/</link><pubDate>Mon, 04 Nov 2024 00:00:00 +0100</pubDate><guid>https://1day.dev/notes/A-Reverse-Engineering-Journey-Walkthrough/</guid><description>Introduction This blog post is about a manually Reverse Engineered challenge I have written for this year NoHat24 security conference. The conference was a blast and we also did (as Hacktive Security) our best to contribute also with a worskhop on Linux Kernel Fuzzing.</description></item><item><title>TODO</title><link>https://1day.dev/notes/ZZTEmplate/</link><pubDate>Mon, 04 Nov 2024 00:00:00 +0100</pubDate><guid>https://1day.dev/notes/ZZTEmplate/</guid><description/></item><item><title>CVE-2022-2602: DirtyCred File Exploitation applied on an io_uring UAF</title><link>https://1day.dev/notes/DirtyCred-File-Exploitation-applied-on-an-io_uring-UAF-CVE-2022-2602/</link><pubDate>Tue, 20 Dec 2022 00:00:00 +0100</pubDate><guid>https://1day.dev/notes/DirtyCred-File-Exploitation-applied-on-an-io_uring-UAF-CVE-2022-2602/</guid><description>Introduction In the past few weeks, I worked with @LukeGix (checkout his blog post on the same vulnerability here) to exploit the CVE-2022-2602, a very interesting bug from multiple perspectives without a public exploit, that impacts the io_uring subsystem with an Use-After-Free vulnerability handling registered file descriptors.</description></item><item><title>Linux Kernel n-day exploit development</title><link>https://1day.dev/notes/Linux-Kernel-n-day-exploit-development-CVE-2020-27786/</link><pubDate>Mon, 13 Jun 2022 00:00:00 +0100</pubDate><guid>https://1day.dev/notes/Linux-Kernel-n-day-exploit-development-CVE-2020-27786/</guid><description>Introduction In the previous article ([[Hunting for Linux kernel public vulnerabilities]]) I described how I identified a good candidate vulnerability using public resources to practise some exploitation techiques.</description></item><item><title>Hunting for Linux kernel public vulnerabilities</title><link>https://1day.dev/notes/Hunting-for-Linux-kernel-public-vulnerabilities/</link><pubDate>Mon, 06 Jun 2022 00:00:00 +0100</pubDate><guid>https://1day.dev/notes/Hunting-for-Linux-kernel-public-vulnerabilities/</guid><description>Introduction Recently was looking for a vulnerability that permitted me to practise what I&amp;rsquo;ve learned during the last few months on Linux Kernel Exploitation with a &amp;ldquo;real-life&amp;rdquo; scenario.</description></item><item><title>KRWX: Kernel Read Write Execute</title><link>https://1day.dev/notes/KRWX-Kernel-Read-Write-Execute/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0100</pubDate><guid>https://1day.dev/notes/KRWX-Kernel-Read-Write-Execute/</guid><description>Introduction github project: https://github.com/kiks7/KRWX
During the last few months/year I was studying and approaching the Kernel Exploitation subject and during this journey I developed few tools that assissted me (and currently assist) on better understanding specific topics.</description></item><item><title>### Exploiting a Quarantine UAF Mitigation on a Custom Allocator Challenge</title><link>https://1day.dev/notes/Exploiting-a-Quarantine-UAF-Mitigation-on-a-Custom-Allocator-Challenge/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://1day.dev/notes/Exploiting-a-Quarantine-UAF-Mitigation-on-a-Custom-Allocator-Challenge/</guid><description>Introduction In the previous blog post we have covered a walkthrough guide to solve the Reverse Engineering challenge written for the NoHat24 security conference.</description></item></channel></rss>